{"pages":[{"title":"404 Page Not Found","text":"","link":"/404.html"},{"title":"关于我","text":"这里是一名计算机专业2019级的硕士研究生。 9年玩机经验，爱好电子产品、苹果全家桶。 教育经历 硕士 计算机技术专业 湖南工商大学 2019级 本科 计算机科学与技术专业 中山大学新华学院 2014级 (学院唯一优秀毕业生代表) 获得荣誉 铜奖2016 CCPC-ACM长春赛区 二等奖2017 全国智能互联大赛家居组2017 大数据创新大赛 三等奖2017 广东计算机设计大赛物联网组 当前技能栈 物联网相关 Java Web MySQL Linux","link":"/about/index.html"},{"title":"search","text":"","link":"/search/index.html"}],"posts":[{"title":"Git永久删除文件(包括历史记录)","text":"有些时候不小心上传了一些敏感文件(例如密码), 或者不想上传的文件(没及时或忘了加到.gitignore里的), 而且上传的文件又特别大的时候, 这将导致别人clone你的代码或下载zip包的时候也必须更新或下载这些无用的文件, 因此, 我们需要一个方法, 永久的删除这些文件(包括该文件的历史记录). 首先, 可以参考 github 的帮助:help.github.com 步骤一: 从你的资料库中清除文件以Windows下为例(Linux类似)，打开项目的Git Bash，使用命令：1git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch path-to-your-remove-file' --prune-empty --tag-name-filter cat -- --all 其中, path-to-your-remove-file 就是你要删除的文件的相对路径(相对于git仓库的跟目录), 替换成你要删除的文件即可. 如果你要删除的文件很多, 可以写进一个.sh文件批量执行, 如果文件或路径里有中文, 由于MinGW或CygWin对中文路径设置比较麻烦, 你可以使用通配符号, 例如: sound/music_.mp3, 这样就把sound目录下以music_开头的mp3文件都删除了. 例如这样, del-music-mp3.sh: 1234#!/bin/bash# git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch projects/Moon.mp3' --prune-empty --tag-name-filter cat -- --all# git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch sound/Music_*.mp3' --prune-empty --tag-name-filter cat -- --all 如果你看到类似下面这样的, 就说明删除成功了:12Rewrite 48dc599c80e20527ed902928085e7861e6b3cbe6 (266/266)# Ref 'refs/heads/master' was rewritten 如果显示 xxxxx unchanged, 说明repo里没有找到该文件, 请检查路径和文件名是否正确. 注意: 补充一点, 如果你想以后也不会再上传这个文件或文件夹, 请把这个文件或文件夹添加到.gitignore文件里, 然后再push你的repo. 步骤二: 推送我们修改后的repo以强制覆盖的方式推送你的repo, 命令如下:1git push origin master --force 这个过程其实是重新上传我们的repo, 比较耗时, 虽然跟删掉重新建一个repo有些类似, 但是好处是保留了原有的更新记录, 所以还是有些不同的. 如果你实在不在意这些更新记录, 也可以删掉重建, 两者也差不太多, 也许后者还更直观些. 执行结果类似下面:1234567Counting objects: 4669, done.Delta compression using up to 4 threads.Compressing objects: 100% (4352/4352), done.Writing objects: 100% (4666/4666), 35.16 MiB | 51 KiB/s, done.Total 4666 (delta 1361), reused 0 (delta 0)To https://github.com/defunkt/github-gem.git 1. beb839d...81f21f3 master -&gt; master (forced update) 步骤三: 清理和回收空间虽然上面我们已经删除了文件, 但是我们的repo里面仍然保留了这些objects, 等待垃圾回收(GC), 所以我们要用命令彻底清除它, 并收回空间. 命令如下:12345678910111213141516rm -rf .git/refs/original/git reflog expire --expire=now --allgit gc --prune=nowCounting objects: 2437, done.# Delta compression using up to 4 threads.# Compressing objects: 100% (1378/1378), done.# Writing objects: 100% (2437/2437), done.# Total 2437 (delta 1461), reused 1802 (delta 1048)git gc --aggressive --prune=nowCounting objects: 2437, done.# Delta compression using up to 4 threads.# Compressing objects: 100% (2426/2426), done.# Writing objects: 100% (2437/2437), done.# Total 2437 (delta 1483), reused 0 (delta 0) 现在你再看看你的.git目录文件大小是不是变小了. 感谢: cnblogs.com/shines77","link":"/2017/05/23/Git永久删除文件-包括历史记录/"},{"title":"Xcode 免费真机调试","text":"从去年的Xcode 7开始，就可以在不加入每年99美元的苹果开发者计划的情况下进行真机调试了。 首先确保你安装的Xcode应用程序是7以上的版本，进入Xcode后，点击左上角Xcode菜单中的Preferences，进入Accounts标签中点击左下角的加号登陆添加的你Apple ID，添加成功后界面如下图，选中账户后点击右下角的View Details。 等加载完后点击iOS Development右侧的create并右键export即可， 接下来进入需要真机调试的iOS项目，在左侧点击项目名，在项目General页的Team中选中刚才添加对应的Apple ID项即可 然后链接手机运行iOS项目并在手机上的设置，通用，描述文件中选择信任刚刚运行的iOS项目程序即可","link":"/2016/11/01/Xcode-免费真机调试/"},{"title":"brew: command not found 修复 mac","text":"之前就安装过brew，然后今天突然要用结果说1-bash: brew: command not found 然后在桌面版的Cakebrew里面也显示brew未安装…那我就重新安一下吧安装很顺利不过有个警告12Warning: /usr/local/bin is not in your PATH.==&gt; Installation successful! 看了一下我的/usr/local/bin目录没问题啊…里面也有brew然后用终端启动依然报错，才意识到有点问题。1-bash: brew: command not found 解决办法：更改bash配置文件（主目录中的.bashrc或.profile），并添加以下行1export PATH=/usr/local/bin:$PATH 感谢：stackoverflow","link":"/2017/03/19/brew-command-not-found-修复-mac/"},{"title":"zsh: command not found:nvm....解决办法","text":"起因以前总是喜欢把东西都放自己服务器上，觉得靠谱。现在深知服务器贵，之前用比赛续费了3年的1c1m小水管禁不起折腾，所以想在GitHub上挂静态Blog+CDN了。然后最近考完了就开始着手搭博客结果安到nvm就卡住了。。。 实际情况按readme安完发现终端里找不到nvm，经过无数排查最终才发现是安装脚本只在默认的bash的.bash_profile里添加了环境变量。 可是我自己换了zsh，我忘了环境变量的地方是不一样的。所以就直接在.zshrc里添加环境变量解决。就是下面这几句123export NVM_DIR=\"$HOME/.nvm\"[ -s “KaTeX parse error: Expected 'EOF', got '&amp;' at position 19: …_DIR/nvm.sh\" ] &amp;̲&amp; \\. \"NVM_DIR/nvm.sh” # This loads nvm[ -s “KaTeX parse error: Expected 'EOF', got '&amp;' at position 28: …_completion\" ] &amp;̲&amp; \\. \"NVM_DIR/bash_completion” # This loads nvm bash_completion 快两年没敲代码自己的shell是啥都不记得了 未解决的强迫症疑问总是觉得在.zshrc里用 source ~/.bash_profile 引用会怪怪的。所以之前都是手动吧.bash_profile里的内容copy到.zshrc。这次忘了就凉了。 所以应该直接用source ~/.bash_profile吗。。。","link":"/2019/04/11/command-not-found-nvm/"},{"title":"Hello World","text":"终于有机会自建Blog啦，顺便把以前在CSDN blog.csdn.net/lvsijian8 的一些文章搬了过来。 这次从一开始的安装设置Hexo，部署到gh，选主题，自定义主题。到后面把国内流量DNS到CDN加速，国外直接DNS到GitHubPaper。然后在CDN缓冲刷新上坑了好久(其实现在也还在坑里有点懵)然后现在终于差不多，算完成1.0了。嘻嘻","link":"/2019/04/11/hello-world/"},{"title":"备份的深度和广度","text":"失一直觉得我的备份工作做得不错，可能因为以前爱折腾，经常刷手机折腾电脑，每次刷机备份数据都是必须的。所以无论是我的电脑还是手机，都会在多处有着备份，并且会定期对备份进行更新。即使是这样，百密一疏。今天还是差点之前做的整个项目就不见了，仔细想想可能是因为之前折腾安卓的IDE的时候不知道怎么给弄没的。（再一次吐槽安卓乱七八糟的环境） 而发现项目不见了立刻查看电脑里其他文件夹的备份，发现也没有。因为我更新备份都是整个覆盖更新的，所以只保留了最新的版本。然后我更新的又比较勤快。。。。。（所以更新勤快反而成了弊端） 復得然后只能回宿舍看看宿舍硬盘里的备份还有没有残留。这次真的是要感谢苹果那2T的时间胶囊了。真的是没有它就gg了，也好彩给时间胶囊备份的硬盘容量比较大。其实之前想删除时间胶囊的历史备份重新备份过的，现在回想起来好险（就是毛病，和总是喜欢清空回收站一样，清完没多久就又要用到了） 注没用过mac的人可能会对时间胶囊有点陌生,苹果的时间胶囊就是可以对mac进行以小时为单位的增量备份的一个程序,通常配合无线硬盘or路由器食用效果更佳,可是前段时间因为嫌弃苹果内置硬盘的路由器就卖给同学了,现在还在等小米新款的小米路由器HD上市的空窗期.所以最近只是偶尔会用移动硬盘时间胶囊备份一下 所以通常都说不要把鸡蛋放在同一个篮子里，这里说的是避灾系统的广度。但是没有提及到深度，我以前也一直都没有注意到这个问题所以这次才会差点gg，之前都是多处备份并且及时覆盖更新，这样可以做到就算多处备份同时故障也可以保证全部数据的安全性。但是却没有考虑到最新的备份不一定是安全的，可能会有一些现在无法发现暴露的问题。所以说要有深度的备份，但是如果是每次都全部备份并且保留历史那空间利用率将会非常的低，增量备份一般都只能用软件记录实现而这类软件也很明显是异常是稀有，我也就知道一个苹果的时间胶囊。所以现在只能期待小米路由器HD可以早点买到了。不然天天提心吊胆的感觉。","link":"/2017/03/01/备份的深度和广度/"},{"title":"vs vshost.exe 已停止工作","text":"背景这学期asp.NET的课，让我随便又重新接触了巨硬的vs，无奈之前安装了vs for mac的预览版却功能缺失，又不愿意在mac那寸土寸金的固态上安一个那么大的使用率又低的vs。所以就在学校的服务器上安了个vs2015 update3和sql server 2014嘿嘿嘿。 环境学校IBM的大服务器比较老,配套的光盘驱动都还是server 2008 R2的，所以那时候也就直接安了,原本准备安sql server 2016的，结果怎么折腾都发现选择功能选项里只有两个功能可以选择，后来看巨硬的文档才发现sql server2016已经不支持2008 R2了。搞的我那时候折腾了那么久，直接再上itellyou找了个2014的官方镜像扔路由器里，上完课就下好了，安装也终于顺利完成。 BUGvs2015 update3虽然安了很久，可是一切顺利，等到要运行的时候却发现项目怎么无法启动。上课问老师结果发现连最基本的程序也无法启动，劝我换版本。我岂会那么容易就放弃？？？一开始是上午搜报错码结果微软说是什么缺少更新IE补丁。看起来好像有点道理毕竟这系统那么老IE都是8的版本(那时候一直想要升级IE11结果离线安装包一直卡住。。。)折腾一番依然无果。 接着又换了一个关键词，这次搜”vshost.exe 已停止工作”，结果第一个就是解决方案哈哈哈。 正题 下面是正题了:说一下我的环境,Windows server 2008 R2 x64 的IBM服务器vs2015 update3运行任何程序都是弹”vshost.exe 已停止工作”.报错:”返回值为 -1073740771 (0xc000041d)。” 只需要,右键工程文件属性,去掉生成中的首选32位的选项框!即可. 暂时没找到在ide里哪里设置,这样的话可能就要每次每个项目都要这样重新设置了.希望大家有一劳永逸的解决办法可以一起分享","link":"/2017/03/17/vs-vshost-exe-已停止工作/"},{"title":"小米路由器Time Machine mac开机恢复","text":"今天mac异常的卡，不小心直接把盘给抹了，反正有小米路由器每天备份么。 但是command+R进入恢复模式就傻眼了，备份的东西不知道去哪里了。想想应该是，MAC在恢复模式根本就没有把小米路由器挂载过来嘛！ google了一个晚上，也试了很多方法，基本原理也就是怎么把小米路由器挂载过来，最后终于捣鼓出来了。现在拿出来和大家分享下 进入恢复模式（command+R） 进入命令行（Terminal） cd /Volumes mkdir backup # 创建挂载目录 mount -t afp afp://Guest@192.168.31.1/MacBackup /Volumes/backup #挂载小米路由器afp盘，注意192.168.31.1是小米路由器的默认ip地址，如果你有修改，请根据实际情况修改 hdid /Volumes/backup/第一个文件[文件名会很长很奇葩，这里直接Tab下就出来了，注意] #不太确定这个命令的作用，应该是执行的意思，如果有童鞋知道，可以告诉我 退出 命令行（Terminal），回到最初的选择页面，选择从Time Machine恢复 这时候就可以看到小米路由器上挂载过来的磁盘了，选择那个磁盘，就可以正常恢复了。感谢：http://igq.cc","link":"/2017/03/17/小米路由器Time-Machine-mac开机恢复/"},{"title":"开启CDN后登陆出现564错误","text":"很早就开头了腾讯云的CDN，只是之前一直没时间留意。最近留意搭建静态博客看到CDN对静态内容的加速，所以先打开试一下加速之前的几个动态网站，因为服务器一直都是一块钱的学生机，所以只有1M的带宽。。。网站有几个页面有个1m的ECharts.js，500kb的js和一些图片，导致有ECharts的那个页面首次无缓冲打开要10s。。。。一直耿耿于怀所以有了接下来的折腾设置大都挺简单，跟着自带手册引导足矣，一个要注意的是，因为我开了一级域名的邮箱域名，所以一级域名的MX已经被用了，再设置一级域名跳转到CDN服务器会和MX记录冲突，所以只能设置www. 的二级域名开启CDN(这个问题其实一开始就应该解决好的。。。一开始就应该只留www. 的二级域名开启一级域名301转发到www.，之前同时开启了二级域名和一级域名指向服务器，这样容易导致浏览器缓存也会误判)。然后也顺便可以把开启了CDN的www和没开的一级域名做个对比，效果还是很显著的在那个要10s的界面。。。。。然后结果发现无法登陆了，一开始看到564还以为是后台的问题检查对比代码排查以为是登陆cookie传输的问题。。。结果并不是，把qcloud的CDN各种设置组合都试过了都不行。。。 最后发现一个问题。。。CDN把动态页面也加速了。。。之前开通的比较早，CDN默认设置不太好，现在开通的默认设置以及自动包括.jsp等动态页面了，然后设置好缓存配置就ok了。。。给大家参考一下我的缓存配置 然后这个也不能打开。。。虽然不知道是啥","link":"/2019/01/29/开启CDN后登陆出现564错误/"},{"title":"从 Course 开始机器学习新学期","text":"摸索从7月底开始，自己在学习新知识的路上模模糊糊的摸索，先是了解到多智能体系统（MAS， Multi-AgentSystem）是分布式人工智能的一部分，这些当然也都是人工智能的一部分。由此开启了学习之路，开始探索AI学习的资源。先是找了一部分网上评级不错的网课： 吴恩达的机器学习李宏毅机器学习台大林轩田机器学习基石+技法吴恩达深度学习斯坦福系列的：机器学习CS229 机器视觉CS231n 自然语言处理CS224n 增强学习CS294 还有一些书籍： 机器学习实战统计学习方法 李航机器学习 西瓜书深度学习 花书 听说吴恩达的机器学习不错，Course也有相应的习题编程练习，字幕校验的也比较好，所以就选择了从这个开始。 先开始了免费试用，然后发现也可以和正常用户一样提交代码获取分数。好像只是没有证书，所以就申请在看课过程中申请了助学金。(在申请过程中上面是有说明申请过程不可试用，试用的和不能申请。可是也申请成功了🤣) 然后准备看deep learning的Course微专业课程，可是这次页面多了一个只能试用7天，所以就不太敢一边试用一边申请助学金了。申请一次助学金要等14天两周，在等待申请的期间就把李宏毅的机器学习2019也看了两周的课程，发现Ag讲的确实会亲民一些，作业也可以只看可就无基础的完成了。 因为之前没有提前学校 Python 在 ML 方面的应用，所以调包什么的也不是很熟悉，李宏毅的作业就做的有点困难。。。所以就一边等助学金一边帮老师做东西一边看李宏毅的课。 等申请下来了才发现Ag的DL课是一个系列5门课程🙈，其中的5个课程每一个都需要单独申请助学金(又要等14天)。。。 接下来就先看DL的第一个课程吧。","link":"/2019/08/28/开学申请个Course-助学金/"},{"title":"看完绿皮书的一些想法","text":"标签看的时候就不断的有标签从电影中蹦出来，开局就在生活窘迫了还不忘歧视黑人工人奠定了电影的主体，后面的黑人旅行手册也说明了为什么电影叫绿皮书。在一路讲述美国南部黑人歧视的同时，还揭开了同性恋、孤独者的标签。 不过结局黑人酒吧和再次呼应的警车都暖心。博士最后独自开车我甚至以为继续暖心主动去找另一个兄弟过节了。 看完想起去年的水形物语，同样是去年的奥斯卡最佳影片奖，同样是许多的话题标签集一身，被歧视的男同丈夫，不完整婚姻的残疾人妻子，虐待动物？的长官，还有人兽。标签过多电影看的已经开始变的魔幻起来了。 消费标签然后每次看完这些电影，看国内一些论坛公众号，总是觉得味道怪怪。似乎只要无脑捧、懂、推女权、同性，就是正确，就是站在道德制高点，让我感觉到一丝咪蒙的气息。 没办法互联网的内容消费看似是用户消费内容，实则早已变为消费用户注意力。谁能抓住用户的眼球时间点击留存，谁就会胜利。这场竞争从一开始的标题党，到后面今日头条的算法推新闻越看越好看，到头条把这种算法用在了抖音上推短视频(我认为说其是21世纪的电子鸦片都不为过)，到咪蒙一类公号的诞生，通过卖焦虑或特立独行的观点吸引用户。然而这一切就像市场经济一样的无法干预自由发展 以至于许多老用户，开始回归rss订阅，放下新闻推荐算法，不让算法限制自己的视线。现在无论是购物、广告、音乐、新闻、视频都早已充满了推荐算法，算法的对与错你我现在都无法定义，能做的只有做好自己做个不挑食的好宝宝。 消费的套路看完老美回头看看国内，近两年陆续开始出现一些现象级的电影，感觉无非两类，热点爱国、讲事件故事。爱国的战狼红海，讲故事的药神。 不知道是不是电影看多了，这些思考让我有种被套路着消费着的感觉。厂家按着这些套路拍电影，大家都按着套路喜欢给高分。 最政治正确同时豆瓣看到一条短评： “如果我不够黑人，也不够白人，又或不够男人，那请你告诉我，托尼，那我到底算是什么人？！”——恭喜，你是最政治正确的人。 从一开始的女权，到同性，黑人，似乎只要反歧视，就高人一等，反的越多越中性越清高。最终得出这样的一种最政治正确的人。似乎十分可笑。 再引一句豆瓣的影评 这部电影也算是给了白人一个小小的抱怨机会吧。不是每个白人都受过高等教育见过世面，也不是每个白人都要活得道貌岸然。我生长在一个小环境里，我没见过很多和我不一样的人，我只见过吃炸鸡的黑人，我觉得你看起来就是一个喜欢吃炸鸡的人才买了炸鸡，你能不能也理解一下我的见识短浅和心直口快。 是黑人过于矫情？还是发表反歧视的人过于自诩清高？还是歧视者过于无知。我们都无从得知，这一切都是相对的，只是看你在何种视角，来看这个世界。 当然这是一部好电影，看的很舒服，喜欢托尼。","link":"/2019/04/27/看完绿皮书的一些想法/"},{"title":"我的MD教程","text":"博客链接 https://blog.lvsijian.cn 斜体。。。。加粗。。。。删除线 分割线2 1234include &lt;stdio.h&gt;int main(){ int a=0;} 行内代码var hmt = [] 首先 其次 最后 0 列表 1 2 引用 鲁迅说过 我没说过","link":"/2019/04/23/我的MD教程/"}],"tags":[{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Xcode","slug":"Xcode","link":"/tags/Xcode/"},{"name":"iOS","slug":"iOS","link":"/tags/iOS/"},{"name":"brew","slug":"brew","link":"/tags/brew/"},{"name":"终端","slug":"终端","link":"/tags/终端/"},{"name":"bash","slug":"bash","link":"/tags/bash/"},{"name":"zsh","slug":"zsh","link":"/tags/zsh/"},{"name":"nvm","slug":"nvm","link":"/tags/nvm/"},{"name":"CSDN","slug":"CSDN","link":"/tags/CSDN/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"备份","slug":"备份","link":"/tags/备份/"},{"name":"Time Machine","slug":"Time-Machine","link":"/tags/Time-Machine/"},{"name":"小米路由器","slug":"小米路由器","link":"/tags/小米路由器/"},{"name":"ASP","slug":"ASP","link":"/tags/ASP/"},{"name":"VS","slug":"VS","link":"/tags/VS/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"CDN","slug":"CDN","link":"/tags/CDN/"},{"name":"564","slug":"564","link":"/tags/564/"},{"name":"机器学习","slug":"机器学习","link":"/tags/机器学习/"},{"name":"Course","slug":"Course","link":"/tags/Course/"},{"name":"电影","slug":"电影","link":"/tags/电影/"},{"name":"绿皮书","slug":"绿皮书","link":"/tags/绿皮书/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"}],"categories":[{"name":"开发","slug":"开发","link":"/categories/开发/"},{"name":"终端","slug":"开发/终端","link":"/categories/开发/终端/"},{"name":"GitHub","slug":"开发/GitHub","link":"/categories/开发/GitHub/"},{"name":"生活","slug":"生活","link":"/categories/生活/"},{"name":"Xcode","slug":"开发/Xcode","link":"/categories/开发/Xcode/"},{"name":"VS","slug":"开发/VS","link":"/categories/开发/VS/"},{"name":"CDN","slug":"开发/CDN","link":"/categories/开发/CDN/"},{"name":"Deep Learning","slug":"开发/Deep-Learning","link":"/categories/开发/Deep-Learning/"},{"name":"Blog","slug":"生活/Blog","link":"/categories/生活/Blog/"},{"name":"Mac","slug":"生活/Mac","link":"/categories/生活/Mac/"},{"name":"电影","slug":"生活/电影","link":"/categories/生活/电影/"},{"name":"Markdown","slug":"生活/Markdown","link":"/categories/生活/Markdown/"}]}